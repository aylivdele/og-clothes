openapi: 3.0.0
info:
  version: 0.0.1
  title: clothes api
paths:
  /ping:
    get:
      operationId: ping
      summary: Server heartbeat operation
      description: >-
        This operation shows how to override the global security defined above,
        as we want to open it up for all users.
      security: []
      responses:
        '200':
          description: OK
  /items:
    get:
      operationId: getAllItems
      summary: Retrieve all items
      responses:
        '200':
          description: A list of items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
    post:
      operationId: createItem
      summary: Create a new item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '204':
          description: Item created successfully
  /items/{itemId}:
    get:
      operationId: getItemById
      summary: Retrieve a single item
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
    put:
      operationId: updateItem
      summary: Update an existing item
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '204':
          description: Item updated successfully
    delete:
      operationId: deleteItem
      summary: Delete an item
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Item deleted successfully
  /categories:
    get:
      operationId: getAllCategories
      summary: Retrieve all categories
      responses:
        '200':
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      operationId: createCategory
      summary: Create a new category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
  /categories/{categoryId}:
    get:
      operationId: getCategory
      summary: Retrieve a single category
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
    put:
      operationId: updateCategory
      summary: Update an existing category
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
    delete:
      operationId: deleteCategory
      summary: Delete a category
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Category deleted successfully
  /images:
    post:
      operationId: createImage
      summary: Add an image
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image'
      responses:
        '201':
          description: Image added successfully
    get:
      operationId: getImages
      summary: Get images
      responses:
        '200':
          description: A list of images
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /images/{imageId}:
    put:
      operationId: updateImage
      summary: Update an existing image
      parameters:
        - name: imageId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image'
      responses:
        '204':
          description: Image added successfully
    delete:
      operationId: deleteImage
      summary: Delete an image
      parameters:
        - name: imageId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Image deleted successfully
    get:
      operationId: getImage
      summary: Get a single image
      parameters:
        - name: imageId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single image
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
  /images/data/{imageId}:
    get:
      operationId: getImageData
      summary: Get a single image data in stream mode
      parameters:
        - name: imageId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single image data in stream mode
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    post:
      operationId: createImageData
      summary: Add an image data
      parameters:
        - name: imageId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '204':
          description: Image data added successfully
components:
  schemas:
    Image:
      type: object
      properties:
        id:
          type: integer
          format: int64
        position:
          type: integer
      required: [ id, position ]
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        article:
          type: string
        images:
          type: array
          items:
            type: integer
        price:
          type: number
          format: float
        category:
          type: integer
        properties:
          type: object
          additionalProperties:
            type: boolean
      required: [ id, name, description, article, images, price ]
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        subcategories:
          type: array
          items:
            type: integer
        properties:
          type: array
          items:
            $ref: "#/components/schemas/Property"
      required: [ id, name, subcategories, properties ]
    Property:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        values:
          type: array
          items:
            $ref: "#/components/schemas/PropertyValue"
      required: [id, name, values]
    PropertyValue:
      type: object
      properties:
        id:
          type: integer
          format: int64
        value:
          type: string
      required: [id, value]
#  securitySchemes:
#    application:
#      type: oauth2
#      flows:
#        clientCredentials:
#          tokenUrl: 'http://example.com/oauth/token'
#          scopes:
#            write: allows modifying resources
#            read: allows reading resources